/**
 * Core mixins
 *
 * They are heavily used within core and project files.
 *
 * Heavily based on <https://github.com/inuitcss>
 */


/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing
 * in a single value. This will generate a rem-based font-size with its pixel
 * fallback, as well as a unitless line-height which will place the element
 * on your baseline, e.g.:
 *
 * Usage example:
 *  .foo {
 *    @include font-size(12px);
 *  }
 *
 * Output:
 *  .foo {
 *    font-size: 0.75rem;
 *    line-height: 2;
 *  }
 *
 * If you do not want to generate a line-height automatically, you
 * simply pass in your own as a second paramater:
 *
 * Usage example:
 *  .foo {
 *    @include font-size(12px, 1.5);
 *  }
 *
 * This parameter can be any integer, ‘inherit’, or ‘normal’. If you don’t
 * want a line-height at all, pass in a second paramater of ‘none’ or ‘false’:
 *
 * Usage example:
 *  .foo {
 *    @include font-size(12px, none);
 *  }
 *
 */

// scss-lint:disable DuplicateProperty
// scss-lint:disable ElsePlacement

@mixin font-size($font-size, $line-height: auto) {
  font-size: $font-size;
  //font-size: ($font-size / $base-font-size) * 1rem;

  @if $line-height == auto {
    line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
  } @else {

    @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
      line-height: $line-height;
    }

    @elseif ($line-height != none and $line-height != false) {
      @warn "D’oh! '#{$line-height}' is not a valid value for `line-height`.";
    }
  }
}

// scss-lint:enable DuplicateProperty
// scss-lint:enable ElsePlacement





/**
 * Generate media queries from the aliases and conditions defined in
 * `_core.variables.scss`.
 *
 * Usage example:
 *  .foo {
 *    color: green;
 *
 *    @include media-query(palm) {
 *      color: red;
 *    }
 *  }
 *
 */

@mixin media-query($mq) {

  $breakpoint-found: false;

  // Loop through the list of breakpoints we’ve provided in our settings file.
  @each $breakpoint in $breakpoints {

    // Grab the alias and the condition from their respective locations in
    // the list.
    $alias:     nth($breakpoint, 1);
    $condition: nth($breakpoint, 2);

    // If the media query we’ve specified has an alias and a condition...
    @if $mq == $alias and $condition {

      // ...tell the mixin that we’ve found it...
      $breakpoint-found: true;

      // ...and spit it out here.
      @media #{$condition} {
        @content;
      }
    }
  }

  // If the user specifies a non-exitent alias, send them a warning.
  @if $breakpoint-found == false {
    @warn "Oops! Breakpoint '#{$mq}' does not exist.";
  }

}



/**
 * A mixin to spit out our width classes. Pass in the columns we
 * want the widths to have, and an optional suffix for responsive widths.
 *
 * This mixin is not applicable directly. Instead the mixin extension in
 * `_utils.sizes.scss` generates all width- and breakpoint classes.
 */

// Do we want to use classes like `<div class="u-1/4">` instead of
// `<div class="u-1of4">`?
// $use-fractions: true !default;
//
// // Depending on what we chose for `$use-fractions`, create
// // the relevant delimiter.
// @if ($use-fractions == true) {
//   $widths-delimiter: \/ !global;
// } @else {
//   $widths-delimiter: of !global;
// }

$widths-delimiter: of !global;

@mixin widths($widths-columns, $widths-breakpoint: null) {

  // Loop through the number of columns for each denominator of our fractions.
  @each $widths-denominator in $widths-columns {

    // If we’re trying to make wholes, just spit a 100% width utility
    // out one time only.
    @if ($widths-denominator == 1) {
      .u-1#{$widths-delimiter}1#{$widths-breakpoint} {
        flex-basis: auto !important;
        width: 100% !important;
      }
    } @else {

      // Begin creating a numberator for our fraction up
      // until we hit the denominator.
      @for $widths-numerator from 1 to $widths-denominator {

        // Build a class in the format `.u-3/4` or `.u-3-of-4`.
        .u-#{$widths-numerator}#{$widths-delimiter}#{$widths-denominator}#{$widths-breakpoint} {
          flex-basis: auto !important;
          width: ($widths-numerator / $widths-denominator) * 100% !important;
        }
      }
    }
  }
}




/**
 * Spawn a group of modifiers (tiny, small, large, huge) to arbitrary
 * classes, based on our base spacing unit settings. Pass any appropriate
 * attribute as argument.
 *
 * Don't use this on buttons or grid abstractions. These abstractions have
 * their own set of size modifiers.
 *
 * Usage example:
 *
 *  .foo {
 *    @include size-modifiers(padding);
 *
 *    padding: $base-spacing-unit;
 *  }
 *
 * Output:
 *  .foo--tiny {
 *    padding: ...
 *  }
 *  .foo--small {
 *    padding: ...
 *  }
 *
 *  a.s.o.
 *
 * ===
 *
 *  .foo {
 *    @include size-modifiers(padding-left, padding-right);
 *
 *    padding-top: $base-spacing-unit;
 *    padding-bottom: $base-spacing-unit;
 *  }
 *
 * Output:
 *  .foo--tiny {
 *    padding-left: ...
 *    padding-right: ...
 *  }
 *  .foo--small {
 *    padding-left: ...
 *    padding-right: ...
 *  }
 *
 *  a.s.o.
 *
 * ===
 *
 *  .foo {
 *    @include size-modifiers(line-height);
 *
 *    line-height: $base-spacing-unit;
 *  }
 *
 * Output:
 *  .foo--tiny {
 *    line-height: ...
 *  }
 *  .foo--small {
 *    line-height: ...
 *  }
 *
 *  a.s.o.
 *
 */

@mixin size-modifiers($properties...) {

  &--tiny {
    @each $property in $properties {
      #{$property}: $base-spacing-unit--tiny;
    }
  }

  &--small {
    @each $property in $properties {
      #{$property}: $base-spacing-unit--small;
    }
  }

  &--large {
    @each $property in $properties {
      #{$property}: $base-spacing-unit--large;
    }
  }

  &--huge {
    @each $property in $properties {
      #{$property}: $base-spacing-unit--huge;
    }
  }

}
