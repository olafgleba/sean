/**
 * Core grid abstraction
 *
 * To leave the abstraction pure no fallback for non capable browsers
 * is applied. If you need to provide a fallback define this in
 * your `layout.scss` (or whatever is appropriate).
 */

$grid-gutter-size: $base-spacing-unit !default;

// Gutter modifiers
$grid-gutter-size--tiny:  quarter($grid-gutter-size) !default;
$grid-gutter-size--small: halve($grid-gutter-size) !default;
$grid-gutter-size--large: double($grid-gutter-size) !default;
$grid-gutter-size--huge:  quadruple($grid-gutter-size) !default;


/**
 * grid container
 *
 * All content must be contained within child `grid__cell` elements at least.
 * If paddings are desired apply them on a container within `grid__cell`.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 * 2. Respect the natural flow of rows, e.g. wrap flex grid cells
 */

.grid {
  display: flex; /* 1 */
  flex-flow: row wrap; /* 2 */
  margin: 0; /* 1 */
  padding: 0; /* 1 */
}




/**
 * Modifier: Root alignments
 *
 * Alignment modifiers for the root element. Will effect all child elements.
 * NOTE: To apply individual cell alignments, s.below `utils.flexbox`.
 *
 *
 */

 /**
  * Modifier: Center horizontal align grid cells
  */

 .grid--center {
   justify-content: center;
 }

/**
 * Modifier: Right horizontal align grid cells
 */

.grid--right {
  justify-content: flex-end;
}

 /**
 * Modifier: Bottom align grid cells
 */

.grid--bottom {
  align-items: flex-end;
}

/**
 * Modifier: Center align grid cells
 */

.grid--middle {
  align-items: center;
}





/**
 * Modifier: Gutters
 *
 * NOTE: this can trigger a horizontal scrollbar if the component is as wide as
 * the viewport. Use padding on a container, or `overflow-x:hidden` to protect
 * against it.
 */

.grid--gutter {
  margin: 0 calc(-0.5 * #{$grid-gutter-size});
}

.grid--gutter > .grid__cell {
  padding: 0 calc(0.5 * #{$grid-gutter-size});
}


/**
 * Modifiers: Blow/shrink gutters
 */

// tiny
.grid--gutter-tiny {
  margin: 0 calc(-0.5 * #{$grid-gutter-size--tiny});
}

.grid--gutter-tiny > .grid__cell {
  padding: 0 calc(0.5 * #{$grid-gutter-size--tiny});
}

// small
.grid--gutter-small {
  margin: 0 calc(-0.5 * #{$grid-gutter-size--small});
}

.grid--gutter-small > .grid__cell {
  padding: 0 calc(0.5 * #{$grid-gutter-size--small});
}

// large
.grid--gutter-large {
  margin: 0 calc(-0.5 * #{$grid-gutter-size--large});
}

.grid--gutter-large > .grid__cell {
  padding: 0 calc(0.5 * #{$grid-gutter-size--large});
}

// huge
.grid--gutter-huge {
  margin: 0 calc(-0.5 * #{$grid-gutter-size--huge});
}

.grid--gutter-huge > .grid__cell {
  padding: 0 calc(0.5 * #{$grid-gutter-size--huge});
}




/**
 * Grid cell
 *
 * By default cells take any space available. Rely on combining
 * `grid__cell` with a dimension utility or a component class that
 * extends 'grid', s. `_utils.size.scss`.
 *
 * 1. Fix issue where elements with overflow extend past the
 *    `grid__cell` container, s. https://git.io/vw5oF
 */

.grid__cell {
  flex-basis: 100%;
  min-height: 0; /* 1 */
}



/**
 * Grid cell modifiers
 *
 * 1. Use `0%` to avoid bug in IE10/11 with unitless flex basis
 * s. http://git.io/vllWx
 */

 /**
  * Grid cell modifier: Distribute cells to available space by default
  *
  * 1. Use `0%` to avoid bug in IE10/11 with unitless flex basis
  * s. http://git.io/vllWx
  */

.grid--fit > .grid__cell {
  flex: 1 1 0%; /* 1 */
}

/**
 * Grid cell modifier: Equal height of grid cells
 */
.grid--equal-height > .grid__cell {
  display: flex;
}
