/**
 * Core grid component
 *
 * Heavily inspired by <https://github.com/suitcss/components-grid/>
 *
 * DO NOT apply dimension or offset utilities to the `grid` element. All cell
 * widths and offsets should be applied to child grid cells only.
 */

$grid-font-size:   $base-font-size !default;
$grid-gutter-size: $base-spacing-unit !default;

// Gutter modifiers
$grid-gutter-size--tiny:  quarter($grid-gutter-size) !default;
$grid-gutter-size--small: halve($grid-gutter-size) !default;
$grid-gutter-size--large: double($grid-gutter-size) !default;
$grid-gutter-size--huge:  quadruple($grid-gutter-size) !default;


/**
 * Grid container
 *
 * All content must be contained within child `grid__cell` elements.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 * 2. Remove inter-cell whitespace that appears between `inline-block` child
 *    elements.
 * 3. Ensure consistent default alignment.
 */


.grid {
  display: block; /* 1 */
  font-size: 0; /* 2 */
  margin: 0; /* 1 */
  padding: 0; /* 1 */
  text-align: left; /* 3 */
}

/**
 * Modifier: Center align all grid cells
 */

.grid--align-center {
  text-align: center;
}

/**
 * Modifier: Right align all grid cells
 */

.grid--align-right {
  text-align: right;
}

/**
 * Modifier: middle-align grid cells
 */

.grid--align-middle > .grid__cell {
  vertical-align: middle;
}

/**
 * Modifier: Bottom-align grid cells
 */

.grid--align-bottom > .grid__cell {
  vertical-align: bottom;
}



/**
 * Modifier: Gutters
 *
 * NOTE: this can trigger a horizontal scrollbar if the component is as wide as
 * the viewport. Use padding on a container, or `overflow-x:hidden` to protect
 * against it.
 */

.grid--gutter {
  margin: 0 calc(-0.5 * #{$grid-gutter-size});
}

.grid--gutter > .grid__cell {
  padding: 0 calc(0.5 * #{$grid-gutter-size});
}


/**
 * Modifiers: Blow/shrink gutters
 */

// tiny
.grid--gutter--tiny {
  margin: 0 calc(-0.5 * #{$grid-gutter-size--tiny});
}

.grid--gutter--tiny > .grid__cell {
  padding: 0 calc(0.5 * #{$grid-gutter-size--tiny});
}

// small
.grid--gutter--small {
  margin: 0 calc(-0.5 * #{$grid-gutter-size--small});
}

.grid--gutter--small > .grid__cell {
  padding: 0 calc(0.5 * #{$grid-gutter-size--small});
}

// large
.grid--gutter--large {
  margin: 0 calc(-0.5 * #{$grid-gutter-size--large});
}

.grid--gutter--large > .grid__cell {
  padding: 0 calc(0.5 * #{$grid-gutter-size--large});
}

// huge
.grid--gutter--huge {
  margin: 0 calc(-0.5 * #{$grid-gutter-size--huge});
}

.grid--gutter--huge > .grid__cell {
  padding: 0 calc(0.5 * #{$grid-gutter-size--huge});
}




/**
 * Grid cell
 *
 * No explicit width by default. Rely on combining `grid__cell`
 * with a dimension utility or a component class that extends 'grid',
 * s. `_utils.sizes.scss`.
 *
 * 1. Fundamentals of the non-float grid layout.
 * 2. Reset font size change made in `grid`.
 * 3. Keeps content correctly aligned with the grid direction.
 * 4. Controls vertical positioning of units.
 * 5. Make cells full-width by default.
 */

.grid__cell {
  box-sizing: border-box;
  display: inline-block; /* 1 */
  font-size: $grid-font-size; /* 2 */
  margin: 0;
  padding: 0;
  text-align: left; /* 3 */
  vertical-align: top; /* 4 */
  width: 100%; /* 5 */
}

/**
 * Modifier: Horizontally center one unit
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `grid` object.
 */

.grid__cell--center {
  display: block;
  margin: 0 auto;
}
