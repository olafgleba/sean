/**
 * Core list abstraction
 *
 * Several raw list abstractions which solves daily "bread and butter"
 * lists. Additionally these abstractions helps us to build meaningful
 * components.
 */

$list-padding:   $base-spacing-unit !default;
$list-font-size: $base-font-size !default;

$list-padding--tiny:  quarter($list-padding) !default;
$list-padding--small: halve($list-padding) !default;
$list-padding--large: double($list-padding) !default;
$list-padding--huge:  quadruple($list-padding) !default;



/** @define list-bare */

/**
 * List bare
 *
 * Simply removes the list-style and get rid of margin/paddings
 * that might be present. The abstraction is used in nearly all other
 * list abstractions per @extend as we probably never want list styles
 * to appear within those components.
 */

.list-bare,
%list-bare {
  list-style: none;
  margin: 0;
  padding: 0;
}





/**
 * List inline block
 *
 * Set a list in horizontal inline block mode.
 *
 * 1. Remove inter-cell whitespace that appears between
 *    `inline-block` child elements.
 * 2. Reset font size change made in `list-inline-block`.
 */

/** @define list-inline-block */

.list-inline-block,
%list-inline-block {
  @extend %list-bare;

  font-size: 0; /* 1 */

  > li {
    @extend %list-inline-block__item;
  }
}

/**
 * Child of `.list-inline-block`
 */

.list-inline-block__item,
%list-inline-block__item {
  display: inline-block;
  font-size: $list-font-size; /* 2 */
}




/**
 * List stacked
 *
 * Set a list in vertical block mode.
 */

.list-stacked,
%list-stacked {
  @extend %list-bare;

  > li {
    @extend %list-stacked__item;
  }
}

/**
 * Children of `.list-stacked`
 *
 * 1. Dedicated link takes all available space
 */

.list-stacked__item,
%list-stacked__item {
  display: block;
}

.list-stacked__block-link {
  display: block; /* 1 */
}






/**
 * List table
 *
 * Set list in table mode. Spreads every list item to have equal widths.
 *
 * 1. Parse faster and get more predictable behaviour as all children
 *    occupies equal width.
 * 2. Spread parent element to available space.
 */

.list-table,
%list-table {
  @extend %list-bare;

  display: table;
  table-layout: fixed; /* 1 */
  width: 100%; /* 2 */
  text-align: center;

  > li {
    @extend %list-table__item;
  }
}

/**
 * Children of `.list-table`
 *
 * 1. Automatic divide words with hyphenation.
 * 2. Dedicated link takes all available space
 */

.list-table__item,
%list-table__item {
  display: table-cell;
  text-align: center;
  hyphens: auto; /* 1 */
}

.list-table__block-link {
  display: block; /* 2 */
}






/**
 * List chart
 *
 * Gives a 1:1 comparison layout of label > value structure. Takes all
 * available space of parent. Intend to use for any table alike layouts
 * like price includes etc. which are semantically no tables at all.
 *
 * Applicable to div, ul/ol and dl.
 *
 * 1. By default children take all the available space of parent.
 */

.list-chart,
%list-chart {
  @extend %list-bare;

  display: flex;
  flex-flow: row wrap;
  justify-content: space-between; /* 1 */
}

.list-chart__label {
  width: 50%;
}

.list-chart__value {
  white-space: nowrap;
}


/**
 * Modifiers: Change flex container horizontal alignment
 */

.list-chart--start {
  justify-content: flex-start;
}

.list-chart--end {
  justify-content: flex-end;
}

.list-chart--center {
  justify-content: center;
}

.list-chart--around {
  justify-content: space-around;
}





/**
 * Modifiers: Align the content of list items
 *
 * Example:
 *   <ul class="list-table list--[align-left]"></ul>
 */

.list--text-left {
  > li {
    text-align: left;
  }
}

.list--text-center {
  > li {
    text-align: center;
  }
}

.list--text-right {
  > li {
    text-align: right;
  }
}





/**
 * Modifiers: Blow/shrink list items
 *
 * Generic size utilities. Is applicable on every list abstraction except
 * where flex box is involved.
 *
 * 1. Expand list item paddings
 * 2. Ommit left/right padding of first/last item
 *
 * Example:
 *   <ul class="list-table list--[tiny]"></ul>
 *   <ul class="list-stacked list--[tiny] list--skip-vertical"></ul>
 *   <ul class="list-inline-block list--[tiny]-vertical list--skip-vertical"></ul>
 */

.list--tiny {
  > li {
    padding: $list-padding--tiny; /* 1 */
  }
}

.list--small {
  > li {
    padding: $list-padding--small; /* 1 */
  }
}

.list--large {
  > li {
    padding: $list-padding--large; /* 1 */
  }
}

.list--huge {
  > li {
    padding: $list-padding--huge; /* 1 */
  }
}



.list--tiny-vertical {
  > li {
    padding-left:  $list-padding--tiny; /* 1 */
    padding-right: $list-padding--tiny; /* 1 */
  }
}

.list--small-vertical {
  > li {
    padding-left:  $list-padding--small; /* 1 */
    padding-right: $list-padding--small; /* 1 */
  }
}

.list--large-vertical {
  > li {
    padding-left:  $list-padding--large; /* 1 */
    padding-right: $list-padding--large; /* 1 */
  }
}

.list--huge-vertical {
  > li {
    padding-left:  $list-padding--huge; /* 1 */
    padding-right: $list-padding--huge; /* 1 */
  }
}




.list--skip-vertical { /* 2 */
  > li {
    &:first-of-type {
      padding-left: 0;
    }

    &:last-of-type {
      padding-right: 0;
    }
  }
}

// scss-lint:enable NameFormat
